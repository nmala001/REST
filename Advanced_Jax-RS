Alternative way of bootstrapping a JAX-RS Application:

moxy:
The framework to convert from java instances to the JSON instances
-> We have added moxy which converts the java instances to JSON.
-> Changed the build configuration from java 5 to java 7

-> All the jersey dependencies and moxy dependencies have been added to Pom.xml file
-> Throw in properties for jersey version and encoding


Adding Java classes:

-> Will be adding classes in src/main/java

Singleton:

to make a resource singleton, annotate it with @singleton

-> if we make multiple requests it is held on to the same request of a class.

Singleton resources vs per request resources:

per request life cycle is a default life cycle whereas singleton scope holds on to the instance.


Param Annotations and member variables:

The {PathParam} lets you map the resource with the variable path pattern
-> both the method arguments and the member variables can be annotated using the queryParam and pathParam parameters.
-> It is better to annotate the member variables with @pathParam and @queryParam rather than method arguments as the whole class can access 
it rather than just one method.

@Provider annotations to create the custom providers

Message Body Readers and Message Body Writers:

Message Body : Dealing with the content of the message in the request body and the response body

Every Message Body writer has to implement the interface of Message body writer.

Every Message Body Reader has to implement the interface of Message body Reader.

The servlet container has to be restarted every time we use the @provider annotation

Best Practices for building client side code:

-> Create a web target object which is a base target.
-> Take the base target and add on the rest of the path to it.

Rest Authentication:

Implementing Filters in Jax-RS:

1. Request Filter
2. Response Filter








