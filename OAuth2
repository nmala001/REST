Securing the Restful APIs using OAuth 2.0:

-> Jersey provides reference implementation for JAX-RS.
-> JAX-RS, OAUTH, and Demo

Version - v1
Context - cwm-rest-services
Invocation URL - https://apigateway.test.bnymellon.com/cwm-rest-services/v1


Allows multiple user requests

Credentials:

sandbox:

client ID: sX4Qfg__Q7woC9bz1u0HNag8QGYa
Consumer secret: RpF0Pa8uw9a7YsLLp99PMKRdg7ka

JAXRS - Security

->First process is to authenticate the respective caller.
->Then the Authorization roles have to be applied on top of it.

Authenticate the rest api caller
JAX-RS processing is based on servlet container
Internal-JAXRS security
-> Based on JAX-RS container request filter

Result of Authentication: JAX-RS Security Context

Authentication mechanism adopted : OAuth


OAuth:

Resource owner: apistore
service provider: web services application
access token is the password provided by the service provider.

Bearer token: these are the pre dominant type of access tokens used with OAuth 2.0. These are basically the strings.
-> The bearer token is generally created by the authentication server.
-> When a user authenticates the application, the bearer or a refresh token is generated.
-> The generation of the bearer token isnt random.
-> In order to use an api, we need to have an access token.
-> Access tokens are short lived(around an hour).
-> To get the access token we send the bearer token along with the client id and secret.
-> This way the server knows that the application using the bearer token is the same application that it was created for.
-> We cant just create a bearer token generated for one application and use it for another application.
-> A Bearer token is set in the authorization header of every inline action http request.
-> If using bearer tokens, verify that the request is coming from the authentication server and is intended for the the sender domain
-> If the token doesn't verify, the service should respond to the request with an HTTP response code 401 (Unauthorized).


-> JAX-RS 2.0 introduces the JAX-RS client
-> JAX-RS serves as a consumer/client party in Oauth scenario.

Functionality:
Client Side:
-> Perform Authorization flow
-> Make Authenticated requests(ClientRequestFilters, ClientResponseFilters)
Server Side:
-> Authorization flow: JAX-RS Resources
-> Authenticated requests: ContainerRequestFilters


